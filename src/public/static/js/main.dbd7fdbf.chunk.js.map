{"version":3,"sources":["components/redirectable/redirectable-route.component.tsx","components/routes/protected-route.component.tsx","global.styles.tsx","App.tsx","reportWebVitals.ts","index.tsx","redux/auth/auth.actions.ts","redux/call/call.actions.ts","redux/chat/chat.types.ts","redux/auth/auth.utils.ts","redux/auth/auth.sagas.ts","redux/call/call.sagas.ts","redux/root-saga.ts","redux/auth/auth.reducer.ts","redux/call/call.reducer.ts","redux/chat/chat.reducer.ts","redux/root-reducer.ts","redux/store.ts","redux/auth/auth.types.ts","redux/call/call.types.ts"],"names":["RedirectableRoute","component","redirectTo","rest","user","useSelector","state","loading","Error","Component","render","props","displayName","id","to","pathname","ProtectedRoute","useStyles","makeStyles","createStyles","boxSizing","margin","padding","html","height","width","body","backgroundColor","a","textDecoration","GlobalStyles","Login","lazy","Registration","Chat","App","dispatch","useDispatch","theme","createTheme","useEffect","checkUserSessionStart","fallback","CircularProgress","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","store","StrictMode","document","getElementById","signInStart","userCredentials","type","AuthActionTypes","SIGN_IN_START","payload","signInSuccess","SIGN_IN_SUCCESS","signInFailure","errors","SIGN_IN_FAILURE","signOutStart","SIGN_OUT_START","signOutSuccess","SIGN_OUT_SUCCESS","signOutFailure","SIGN_OUT_FAILURE","CURRENT_USER_SESSION_START","checkUserSessionSuccess","CURRENT_USER_SESSION_SUCCESS","checkUserSessionFailure","CURRENT_USER_SESSION_FAILURE","registrationStart","registerCredentials","REGISTRATION_START","registrationSuccess","registeredUser","REGISTRATION_SUCCESS","registrationFailure","error","REGISTRATION_FAILURE","clearAuthErrors","RESET_ERRORS","setLocalStream","localStream","CallActionTypes","SET_LOCAL_STREAM","setRemoteStream","remoteStream","SET_REMOTE_STREAM","setScreenSharingStream","screenSharingStream","SET_SCREENSHARING_STREAM","setCallState","callState","SET_CALL_STATE","setCameraEnabled","isCameraEnabled","SET_CAMERA_ENABLED","setMicrophoneEnabled","isMicrophoneEnabled","SET_MICROPHONE_ENABLED","setScreenSharingEnabled","isScreenSharing","SET_SCREENSHARING_ENABLED","resetCallState","RESET_CALL_STATE","showCallDialog","SHOW_CALL_DIALOG","setCallerName","name","SET_NAME_OF_CALLER","setNewTextMessage","newTextMessage","NEW_TEXT_MESSAGE","ChatActionTypes","ROOT_URL","loginUser","loginPayload","axios","url","method","data","withCredentials","response","email","fullName","logoutUser","checkCurrentUserSession","currentUser","registerUser","registerPayload","isUserAuthenticated","signIn","signUp","signOut","onSignUpStart","onSignInStart","onSignOutStart","onCheckUserSessionStart","authSagas","call","put","msg","param","takeLatest","all","onSetCallState","callSagas","rootSaga","authInitialState","errorMessage","AuthReducer","action","callInitialState","CallStates","CALL_AVAILABLE","show","lastTextMessage","undefined","textMessages","CallReducer","SET_LAST_TEXT_MESSAGE","chatInitialState","activeUsers","availableUsers","busyUsers","ChatReducer","SET_ACTIVE_USERS","SET_AVAILABLE_USERS","SET_BUSY_USERS","rootReducer","combineReducers","chat","sagaMiddleware","createSagaMiddleware","middlewares","createStore","applyMiddleware","run"],"mappings":"yOA6BeA,EArBW,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,WAAeC,EAAkB,0CACjEC,EAAOC,aAAY,SAACC,GAAD,OAAuBA,EAAMF,KAAKA,QACrDG,EAAUF,aAAY,SAACC,GAAD,OAAuBA,EAAMF,KAAKG,WAE9D,IAAKN,EACH,MAAMO,MAAM,0BAGd,IAAMC,EAAYR,EAUlB,OAAQ,cAAC,IAAD,2BAAWE,GAAX,IAAiBO,OARV,SAACC,GACd,OAAQ,OAAJP,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,eAAN,OAAqBR,QAArB,IAAqBA,OAArB,EAAqBA,EAAMS,MAAON,EAC7B,cAAC,IAAD,CAAUO,GAAI,CAAEC,SAAUb,KAE1B,cAACO,EAAD,eAAeE,SCIbK,EArBQ,SAAC,GAAwC,IAAtCf,EAAqC,EAArCA,UAAcE,EAAuB,6BAEvDC,EAAOC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,KAAKA,QACpDG,EAAUF,aAAY,SAACC,GAAD,OAAsBA,EAAMF,KAAKG,WAE7D,IAAKN,EACH,MAAMO,MAAM,0BAGd,IAAMC,EAAYR,EASlB,OAAQ,cAAC,IAAD,2BAAWE,GAAX,IAAiBO,OAPV,SAACC,GACd,OAAQ,OAAJP,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,eAAN,OAAqBR,QAArB,IAAqBA,OAArB,EAAqBA,EAAMS,MAAON,EAC7B,cAACE,EAAD,eAAeE,IAEjB,cAAC,IAAD,CAAUG,GAAI,CAAEC,SAAU,kB,kBCjB/BE,EAAYC,aAAW,kBAAMC,YAAa,CAC9C,UAAW,CACT,IAAK,CACHC,UAAW,aACXC,OAAQ,EACRC,QAAS,GAEXC,KAAM,CACJ,yBAA0B,cAC1B,0BAA2B,YAC3BC,OAAQ,OACRC,MAAO,QAETC,KAAM,CACJC,gBAAiB,aACjBH,OAAQ,OACRC,MAAO,QAETG,EAAG,CACDC,eAAgB,QAElB,QAAS,CACPL,OAAQ,OACRC,MAAO,cAUEK,EALM,WAEnB,OADAb,IACO,M,QCvBHc,EAAQC,gBAAK,kBAAM,8DACnBC,EAAeD,gBAAK,kBAAM,8DAC1BE,EAAOF,gBAAK,kBAAM,8DA+CTG,EA7CO,WAEpB,IAAMC,EAAWC,cAEXC,EAAQC,YAAY,IAwB1B,OAJAC,qBAAU,WACRJ,EAASK,iBACT,CAACL,IAGD,8BACE,eAAC,IAAD,CAAkBE,MAAOA,EAAzB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,eAAC,WAAD,CAAUI,SAAU,cAACC,EAAA,EAAD,IAApB,UACE,cAAC,EAAD,CAAmBC,OAAK,EAACC,KAAK,IAAI5C,UAAW8B,EAAO7B,WAAW,cAC/D,cAAC,EAAD,CAAmB0C,OAAK,EAACC,KAAK,UAAU5C,UAAW8B,EAAO7B,WAAW,cACrE,cAAC,EAAD,CAAmB0C,OAAK,EAACC,KAAK,UAAU5C,UAAWgC,EAAc/B,WAAW,cAC5E,cAAC,EAAD,CAAgB0C,OAAK,EAACC,KAAK,YAAY5C,UAAWiC,eCrC/CY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCCdQ,IAAS7C,OACP,cAAC,IAAD,CAAU8C,MAAOA,IAAjB,SACE,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1Bb,K,gCCnBA,qcAEac,EAAc,SAACC,GAAD,MAAqC,CAC9DC,KAAMC,IAAgBC,cACtBC,QAASJ,IAGEK,EAAgB,SAAC9D,GAAD,MAAuB,CAClD0D,KAAMC,IAAgBI,gBACtBF,QAAS7D,IAGEgE,EAAgB,SAACC,GAAD,MAAgC,CAC3DP,KAAMC,IAAgBO,gBACtBL,QAASI,IAGEE,EAAe,iBAAO,CACjCT,KAAMC,IAAgBS,iBAGXC,EAAiB,iBAAO,CACnCX,KAAMC,IAAgBW,mBAGXC,EAAiB,SAACN,GAAD,MAAgC,CAC5DP,KAAMC,IAAgBa,iBACtBX,QAASI,IAGE5B,EAAwB,iBAAO,CAC1CqB,KAAMC,IAAgBc,6BAGXC,EAA0B,SAAC1E,GAAD,MAAuB,CAC5D0D,KAAMC,IAAgBgB,6BACtBd,QAAS7D,IAGE4E,EAA0B,iBAAO,CAC5ClB,KAAMC,IAAgBkB,+BAGXC,EAAoB,SAACC,GAAD,MAAgD,CAC/ErB,KAAMC,IAAgBqB,mBACtBnB,QAASkB,IAGEE,EAAsB,SAACC,GAAD,MAAiC,CAClExB,KAAMC,IAAgBwB,qBACtBtB,QAASqB,IAGEE,EAAsB,SAACC,GAAD,MAA+B,CAChE3B,KAAMC,IAAgB2B,qBACtBzB,QAASwB,IAGEE,EAAkB,iBAAO,CACpC7B,KAAMC,IAAgB6B,gB,gCChExB,iYAEaC,EAAiB,SAACC,GAAD,MAA+B,CAC3DhC,KAAMiC,IAAgBC,iBACtB/B,QAAS6B,IAGEG,EAAkB,SAACC,GAAD,MAAgC,CAC7DpC,KAAMiC,IAAgBI,kBACtBlC,QAASiC,IAGEE,EAAyB,SAACC,GAAD,MAAuC,CAC3EvC,KAAMiC,IAAgBO,yBACtBrC,QAASoC,IAGEE,EAAe,SAACC,GAAD,MAA4B,CACtD1C,KAAMiC,IAAgBU,eACtBxC,QAASuC,IAGEE,EAAmB,SAACC,GAAD,MAA+B,CAC7D7C,KAAMiC,IAAgBa,mBACtB3C,QAAS0C,IAGEE,EAAuB,SAACC,GAAD,MAAmC,CACrEhD,KAAMiC,IAAgBgB,uBACtB9C,QAAS6C,IAGEE,EAA0B,SAACC,GAAD,MAA+B,CACpEnD,KAAMiC,IAAgBmB,0BACtBjD,QAASgD,IAGEE,EAAiB,iBAAO,CACnCrD,KAAMiC,IAAgBqB,mBAGXC,EAAiB,SAACA,GAAD,MAAkC,CAC9DvD,KAAMiC,IAAgBuB,iBACtBrD,QAASoD,IAGEE,EAAgB,SAACC,GAAD,MAAmB,CAC9C1D,KAAMiC,IAAgB0B,mBACtBxD,QAASuD,IAQEE,EAAoB,SAACC,GAAD,MAAmC,CAClE7D,KAAMiC,IAAgB6B,iBACtB3D,QAAS0D,K,gCCpDJ,IAAKE,EAAZ,kC,SAAYA,K,oCAAAA,E,0CAAAA,E,iCAAAA,M,yHCFNC,EAAW,sCAIV,SAAeC,EAAtB,kC,4CAAO,WAAyBC,GAAzB,yBAAApG,EAAA,+EAEoBqG,IAAM,CAC3BC,IAAI,GAAD,OAAKJ,EAAL,mBACHK,OAAQ,OACRC,KAAMJ,EACNK,iBAAiB,IANhB,cAEGC,EAFH,SAQ0CA,EAASF,KAA9CvH,EARL,EAQKA,GAAID,EART,EAQSA,YAAa2H,EARtB,EAQsBA,MAAOC,EAR7B,EAQ6BA,SAR7B,kBASI,CAAE3H,KAAID,cAAa2H,QAAOC,aAT9B,qG,sBAeA,SAAeC,IAAtB,+B,4CAAO,4BAAA7G,EAAA,+EAEoBqG,IAAM,CAC3BC,IAAI,GAAD,OAAKJ,EAAL,oBACHK,OAAQ,OACRE,iBAAiB,IALhB,cAEGC,EAFH,yBAOIA,GAPJ,qG,sBAaA,SAAeI,IAAtB,+B,4CAAO,sCAAA9G,EAAA,+EAEoBqG,IAAM,CAC3BC,IAAI,GAAD,OAAKJ,EAAL,wBACHK,OAAQ,MACRE,iBAAiB,IALhB,cAEGC,EAFH,SAQ4DA,EAASF,KAAhEO,YAAgB9H,EARrB,EAQqBA,GAAID,EARzB,EAQyBA,YAAa2H,EARtC,EAQsCA,MAAOC,EAR7C,EAQ6CA,SAR7C,kBASI,CAAC3H,KAAID,cAAa2H,QAAOC,aAT7B,qG,sBAeA,SAAeI,EAAtB,kC,4CAAO,WAA4BC,GAA5B,yBAAAjH,EAAA,+EAEoBqG,IAAM,CAC3BC,IAAI,GAAD,OAAKJ,EAAL,mBACHK,OAAQ,OACRC,KAAMS,EACNR,iBAAiB,IANhB,cAEGC,EAFH,SAQ0CA,EAASF,KAA9CvH,EARL,EAQKA,GAAID,EART,EAQSA,YAAa2H,EARtB,EAQsBA,MAAOC,EAR7B,EAQ6BA,SAR7B,kBASI,CAAE3H,KAAID,cAAa2H,QAAOC,aAT9B,qG,qCCzCUM,G,WAUAC,G,WAqBAC,G,WAuBAC,G,WA8BAC,G,WAIAC,G,WAIAC,G,WAIAC,G,WAIAC,GApGV,SAAUR,IAAV,uEAEuB,OAFvB,kBAE6BS,YAAKb,GAFlC,UAEGtI,EAFH,wDAIH,OAJG,SAIGoJ,YAAI1E,YAAwB1E,IAJ/B,+BAMH,OANG,oCAMGoJ,YAAIxE,eANP,sDAUA,SAAU+D,EAAV,8EAMsB,OANtB,EAAkBjF,KAAMG,EAAxB,EAAwBA,QAAxB,kBAM4BsF,YAAKxB,EAAW9D,GAN5C,UAMG7D,EANH,wDAQH,OARG,SAQGoJ,YAAItF,YAAc9D,IARrB,6DAUC,KAAMkI,SAVP,iBAYD,OADMjE,EAA4B,KAAMiE,SAASF,KAAK/D,OAXrD,UAYKmF,YAAIpF,YAAcC,IAZvB,gCAcD,OAdC,UAcKmF,YAAIpF,YAAc,CAAC,CACvBqF,IAAK,gCAfN,sDAqBA,SAAUT,EAAV,8EAM+B,OAN/B,EAAkBlF,KAAMG,EAAxB,EAAwBA,QAAxB,kBAMqCsF,YAAKX,EAAc3E,GANxD,UAMGqB,EANH,wDAQH,OARG,SAQGkE,YAAInE,YAAoBC,IAR3B,6DAWC,KAAMgD,SAXP,iBAaD,OADMjE,EAA4B,KAAMiE,SAASF,KAAK/D,OAZrD,UAaKmF,YAAIhE,YAAoBnB,IAb7B,gCAeD,OAfC,UAeKmF,YAAIhE,YAAoB,CAAC,CAC7BiE,IAAK,mCACLC,MAAO,cAjBR,sDAuBA,SAAUT,IAAV,iEAEH,OAFG,kBAEGM,YAAKd,GAFR,OAGH,OAHG,SAGGe,YAAI/E,eAHP,OAIH,OAJG,SAIG+E,YAAIrC,eAJP,8BAMH,OANG,mCAMGqC,YAAI7E,YAAe,CAAC,CACxB8E,IAAK,yBAPJ,qDA8BA,SAAUP,IAAV,iEACL,OADK,SACCS,YAAW5F,IAAgBqB,mBAAoB4D,GADhD,uCAIA,SAAUG,IAAV,iEACL,OADK,SACCQ,YAAW5F,IAAgBC,cAAe+E,GAD3C,uCAIA,SAAUK,IAAV,iEACL,OADK,SACCO,YAAW5F,IAAgBS,eAAgByE,GAD5C,uCAIA,SAAUI,IAAV,iEACL,OADK,SACCM,YAAW5F,IAAgBc,2BAA4BiE,GADxD,uCAIA,SAAUQ,IAAV,iEACL,OADK,SACCM,YAAI,CACRL,YAAKJ,GACLI,YAAKL,GACLK,YAAKH,GACLG,YAAKF,KALF,uC,sBCvGU7C,G,WAgBAqD,G,WAIAC,GApBV,SAAUtD,EAAV,0EAOuB,OAPvB,EAAqB1C,KAArB,EAA2BG,QAA3B,kBAO6BsF,YAAKb,GAPlC,UAOGtI,EAPH,wDASH,OATG,SASGoJ,YAAI1E,YAAwB1E,IAT/B,+BAWH,OAXG,oCAWGoJ,YAAIrC,eAXP,QAYH,OAZG,UAYGqC,YAAIxE,eAZP,sDAgBA,SAAU6E,IAAV,iEACL,OADK,SACCF,YAAW5D,IAAgBU,eAAgBD,GAD5C,uCAIA,SAAUsD,IAAV,iEACL,OADK,SACCF,YAAI,CACRL,YAAKM,KAFF,uC,eCtBkBE,GAAV,SAAUA,IAAV,iEACb,OADa,SACPH,YAAI,CACRN,IACAQ,MAHW,uC,WCEFE,EAA+B,CAC1C5J,KAAM,KACNG,SAAS,EACT0J,aAAc,IAmJDC,EAhJK,WAA2E,IAA1E5J,EAAyE,uDAAtD0J,EAAkBG,EAAoC,uCAC7F,OAAQA,EAAOrG,MACd,KAAKC,IAAgBc,2BACpB,OAAO,2BACHvE,GADJ,IAECC,SAAS,IAEX,KAAKwD,IAAgBgB,6BACpB,OAAO,2BACHzE,GADJ,IAECC,SAAS,EACTH,KAAM+J,EAAOlG,UAEf,KAAKF,IAAgB6B,aACpB,OAAO,2BACHtF,GADJ,IAEC2J,aAAc,KAEhB,KAAKlG,IAAgBI,gBACpB,OAAO,2BACH7D,GADJ,IAECF,KAAM+J,EAAOlG,QACb1D,SAAS,EACT0J,aAAc,KAEhB,KAAKlG,IAAgBC,cACpB,OAAO,2BACH1D,GADJ,IAECC,SAAS,IAEX,KAAKwD,IAAgBW,iBACpB,MAAO,CACNtE,KAAM,KACNG,SAAS,EACT0J,aAAc,IAEhB,KAAKlG,IAAgBqB,mBACpB,OAAO,2BACH9E,GADJ,IAECC,SAAS,IAEX,KAAKwD,IAAgBwB,qBACpB,OAAO,2BACHjF,GADJ,IAECC,SAAS,EACT0J,aAAc,GACd7J,KAAM+J,EAAOlG,UAEf,KAAKF,IAAgBkB,6BACpB,OAAO,2BACH3E,GADJ,IAECC,SAAS,EACTH,KAAM,KACN6J,aAAc,KAEhB,KAAKlG,IAAgBO,gBACrB,KAAKP,IAAgBa,iBACrB,KAAKb,IAAgB2B,qBACpB,OAAO,2BACHpF,GADJ,IAECC,SAAS,EACT0J,aAAeE,EAAOlG,QAASkG,EAAOlG,QAAQ,KAEhD,QACC,OAAO3D,I,QCtEG8J,EAA+B,CAC3C5D,UAAW6D,IAAWC,eACrBxE,YAAa,KACbI,aAAc,KACfG,oBAAqB,KACpBY,iBAAiB,EACjBN,iBAAiB,EACjBG,qBAAqB,EACrBU,KAAM,GACPH,eAAgB,CAAEkD,MAAM,GACxBC,qBAAiBC,EACjBC,aAAc,IAgFAC,GA7EK,WAA2E,IAA1ErK,EAAyE,uDAAtD8J,EAAkBD,EAAoC,uCAC7F,OAAQA,EAAOrG,MACd,KAAKiC,IAAgB6E,sBACpB,OAAO,2BACHtK,GADJ,IAEKkK,gBAAiBL,EAAOlG,UAE9B,KAAK8B,IAAgB6B,iBACnB,OAAO,2BACHtH,GADJ,IAECoK,aAAa,GAAD,mBAAMpK,EAAMoK,cAAZ,CAA0BP,EAAOlG,YAEhD,KAAK8B,IAAgBC,iBACpB,OAAO,2BACH1F,GADJ,IAEKwF,YAAaqE,EAAOlG,UAE1B,KAAK8B,IAAgBI,kBACpB,OAAO,2BACH7F,GADJ,IAEC4F,aAAciE,EAAOlG,UAEvB,KAAK8B,IAAgBO,yBACpB,OAAO,2BACHhG,GADJ,IAEC+F,oBAAqB8D,EAAOlG,UAE9B,KAAK8B,IAAgBU,eACpB,OAAO,2BACHnG,GADJ,IAECkG,UAAW2D,EAAOlG,UAEpB,KAAK8B,IAAgBa,mBACpB,OAAO,2BACHtG,GADJ,IAECqG,gBAAiBwD,EAAOlG,UAE1B,KAAK8B,IAAgBgB,uBACpB,OAAO,2BACHzG,GADJ,IAECwG,oBAAqBqD,EAAOlG,UAE9B,KAAK8B,IAAgBmB,0BACpB,OAAO,2BACH5G,GADJ,IAEC2G,gBAAiBkD,EAAOlG,UAE1B,KAAK8B,IAAgB0B,mBACpB,OAAO,2BACHnH,GADJ,IAECkH,KAAM2C,EAAOlG,UAEf,KAAK8B,IAAgBuB,iBACpB,OAAO,2BACHhH,GADJ,IAEC+G,eAAgB8C,EAAOlG,UAEzB,KAAK8B,IAAgBqB,iBACpB,OAAO,2BACH9G,GADJ,IAECkG,UAAW6D,IAAWC,eAEtBpE,aAAc,KACdG,oBAAqB,KACrBY,iBAAiB,EACjBN,iBAAiB,EACjBG,qBAAqB,EACrBU,KAAM,GACNH,eAAgB,CAAEkD,MAAM,GACxBC,qBAAiBC,EACjBC,aAAc,KAEhB,QACC,OAAOpK,I,SCvFGuK,GAA+B,CAC1CC,YAAa,GACdC,eAAgB,GAChBC,UAAW,IA6BGC,GA1BK,WAA2E,IAA1E3K,EAAyE,uDAAtDuK,GAAkBV,EAAoC,uCAC7F,OAAQA,EAAOrG,MACd,KAAK+D,KAAgBqD,iBACpB,OAAO,2BACH5K,GADJ,IAECwK,YAAaX,EAAOlG,UAEtB,KAAK4D,KAAgBsD,oBACpB,OAAO,2BACH7K,GADJ,IAECyK,eAAgBZ,EAAOlG,UAKzB,KAAK4D,KAAgBuD,eACpB,OAAO,2BACH9K,GADJ,IAEC0K,UAAWb,EAAOlG,UAGpB,QACC,OAAO3D,ICvBK+K,GANKC,YAAgB,CAClClL,KAAM8J,EACNqB,KAAMN,GACN1B,KAAMoB,K,SCDFa,I,OAAiBC,gBAEjBC,GAA6B,CAACF,IAKpC,IAAMhI,GAAQmI,YAAYN,GAAaO,IAAe,WAAf,EAAmBF,KAC1DF,GAAeK,IAAI9B,GAEJvG,Q,+BCTR,IAAKO,EAAZ,kC,SAAYA,K,8BAAAA,E,kCAAAA,E,kCAAAA,E,gCAAAA,E,oCAAAA,E,oCAAAA,E,wCAAAA,E,4CAAAA,E,4CAAAA,E,wDAAAA,E,4DAAAA,E,4DAAAA,E,6BAAAA,M,0DCgBL,IAAKsG,EAOAtE,EAPZ,oE,SAAYsE,K,oCAAAA,E,gCAAAA,E,gCAAAA,E,qCAAAA,M,cAOAtE,K,oCAAAA,E,sCAAAA,E,oDAAAA,E,gCAAAA,E,wCAAAA,E,gDAAAA,E,sDAAAA,E,wCAAAA,E,oCAAAA,E,oCAAAA,E,8CAAAA,E,qCAAAA,M","file":"static/js/main.dbd7fdbf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from \"../../redux/store\";\r\n\r\ninterface Props extends RouteProps {\r\n  redirectTo: string;\r\n}\r\nconst RedirectableRoute = ({ component, redirectTo, ...rest }: Props) => {\r\n  const user = useSelector((state : RootState) => state.user.user);\r\n  const loading = useSelector((state : RootState) => state.user.loading);\r\n\r\n  if (!component) {\r\n    throw Error(\"component is undefined\");\r\n  }\r\n\r\n  const Component = component;\r\n\r\n  const render = (props: RouteComponentProps<any>): React.ReactNode => {\r\n    if (user?.displayName && user?.id && !loading) {  \r\n      return <Redirect to={{ pathname: redirectTo }} />\r\n    } else {\r\n      return <Component {...props} />;\r\n    }\r\n  };\r\n  \r\n  return (<Route {...rest} render={render} />);\r\n}\r\n\r\nexport default RedirectableRoute;","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst ProtectedRoute = ({ component, ...rest }: RouteProps) => {\r\n  \r\n  const user = useSelector((state: RootState) => state.user.user);\r\n  const loading = useSelector((state: RootState) => state.user.loading);\r\n\r\n  if (!component) {\r\n    throw Error(\"component is undefined\");\r\n  }\r\n\r\n  const Component = component;\r\n\r\n  const render = (props: RouteComponentProps<any>): React.ReactNode => {\r\n    if (user?.displayName && user?.id && !loading) {      \r\n      return <Component {...props} />;\r\n    }\r\n    return <Redirect to={{ pathname: '/signin' }} />\r\n  };\r\n\r\n  return (<Route {...rest} render={render} />);\r\n}\r\n\r\nexport default ProtectedRoute;","import createStyles from '@material-ui/styles/createStyles';\r\nimport makeStyles from '@material-ui/styles/makeStyles';\r\n\r\nconst useStyles = makeStyles(() => createStyles({\r\n  '@global': {\r\n    '*': {\r\n      boxSizing: 'border-box',\r\n      margin: 0,\r\n      padding: 0,\r\n    },\r\n    html: {\r\n      '-webkit-font-smoothing': 'antialiased',\r\n      '-moz-osx-font-smoothing': 'grayscale',\r\n      height: '100%',\r\n      width: '100%'\r\n    },\r\n    body: {\r\n      backgroundColor: 'whitesmoke',\r\n      height: '100%',\r\n      width: '100%'\r\n    },\r\n    a: {\r\n      textDecoration: 'none'\r\n    },\r\n    '#root': {\r\n      height: '100%',\r\n      width: '100%'\r\n    }\r\n  }\r\n}));\r\n\r\nconst GlobalStyles = () => {\r\n  useStyles();\r\n  return null;\r\n};\r\n\r\nexport default GlobalStyles;","import { CircularProgress } from '@material-ui/core';\r\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\r\nimport React, { Suspense, lazy, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport RedirectableRoute from './components/redirectable/redirectable-route.component';\r\nimport ProtectedRoute from './components/routes/protected-route.component';\r\nimport GlobalStyles from './global.styles';\r\nimport { checkUserSessionStart } from './redux/auth/auth.actions';\r\n\r\nconst Login = lazy(() => import('./pages/login/login.component'));\r\nconst Registration = lazy(() => import('./pages/sign-up/registration.component'));\r\nconst Chat = lazy(() => import('./pages/chat/chat.component'));\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = createTheme({\r\n    // palette: {\r\n    //   primary: {\r\n    //     main: '#nnn'\r\n    //   }\r\n    // }\r\n  });\r\n\r\n  // useEffect(()=>{\r\n  //   let sessionInterval = setInterval(() => {\r\n  //     dispatch(checkUserSessionStart());\r\n  //     },\r\n  //     1000\r\n  //   );\r\n\r\n  //   return () => {\r\n  //     clearInterval(sessionInterval);\r\n  //   }\r\n  // },[dispatch]);\r\n\r\n  useEffect(()=>{\r\n    dispatch(checkUserSessionStart());\r\n  },[dispatch]);\r\n  \r\n  return (\r\n    <div>\r\n      <MuiThemeProvider theme={theme}>\r\n        <GlobalStyles />\r\n        <Switch>\r\n          <Suspense fallback={<CircularProgress />}>\r\n            <RedirectableRoute exact path='/' component={Login} redirectTo='/chat-app' />\r\n            <RedirectableRoute exact path='/signin' component={Login} redirectTo='/chat-app'/>\r\n            <RedirectableRoute exact path='/signup' component={Registration} redirectTo='/chat-app'/>\r\n            <ProtectedRoute exact path='/chat-app' component={Chat} />\r\n          </Suspense>\r\n        </Switch>\r\n      </MuiThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","\r\nimport { ICredentials } from '../../types/credentials.interface';\r\nimport IResponseError from '../../types/error.interface';\r\nimport ILoggedIn from '../../types/logged-in.interface';\r\nimport IRegisterCredentials from '../../types/sign-up.interface';\r\nimport { AuthActionTypes } from './auth.types';\r\n\r\nexport const signInStart = (userCredentials : ICredentials) => ({\r\n  type: AuthActionTypes.SIGN_IN_START,\r\n  payload: userCredentials\r\n});\r\n\r\nexport const signInSuccess = (user : ILoggedIn) => ({\r\n  type: AuthActionTypes.SIGN_IN_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nexport const signInFailure = (errors : IResponseError[]) => ({\r\n  type: AuthActionTypes.SIGN_IN_FAILURE,\r\n  payload: errors\r\n});\r\n\r\nexport const signOutStart = () => ({\r\n  type: AuthActionTypes.SIGN_OUT_START\r\n});\r\n\r\nexport const signOutSuccess = () => ({\r\n  type: AuthActionTypes.SIGN_OUT_SUCCESS\r\n});\r\n\r\nexport const signOutFailure = (errors : IResponseError[]) => ({\r\n  type: AuthActionTypes.SIGN_OUT_FAILURE,\r\n  payload: errors\r\n});\r\n\r\nexport const checkUserSessionStart = () => ({\r\n  type: AuthActionTypes.CURRENT_USER_SESSION_START\r\n});\r\n\r\nexport const checkUserSessionSuccess = (user : ILoggedIn) => ({\r\n  type: AuthActionTypes.CURRENT_USER_SESSION_SUCCESS,\r\n  payload: user\r\n});\r\n\r\nexport const checkUserSessionFailure = () => ({\r\n  type: AuthActionTypes.CURRENT_USER_SESSION_FAILURE\r\n});\r\n\r\nexport const registrationStart = (registerCredentials: IRegisterCredentials) => ({\r\n  type: AuthActionTypes.REGISTRATION_START,\r\n  payload: registerCredentials\r\n});\r\n\r\nexport const registrationSuccess = (registeredUser : ILoggedIn) => ({\r\n  type: AuthActionTypes.REGISTRATION_SUCCESS,\r\n  payload: registeredUser\r\n});\r\n\r\nexport const registrationFailure = (error : IResponseError[]) => ({\r\n  type: AuthActionTypes.REGISTRATION_FAILURE,\r\n  payload: error\r\n});\r\n\r\nexport const clearAuthErrors = () => ({\r\n  type: AuthActionTypes.RESET_ERRORS \r\n});","import { CallActionTypes, CallStates, IDialogType, ITextMessage } from './call.types';\r\n\r\nexport const setLocalStream = (localStream: MediaStream) => ({\r\n  type: CallActionTypes.SET_LOCAL_STREAM,\r\n  payload: localStream\r\n});\r\n\r\nexport const setRemoteStream = (remoteStream: MediaStream) => ({\r\n  type: CallActionTypes.SET_REMOTE_STREAM,\r\n  payload: remoteStream\r\n});\r\n\r\nexport const setScreenSharingStream = (screenSharingStream: MediaStream) => ({\r\n  type: CallActionTypes.SET_SCREENSHARING_STREAM,\r\n  payload: screenSharingStream\r\n});\r\n\r\nexport const setCallState = (callState: CallStates) => ({\r\n  type: CallActionTypes.SET_CALL_STATE,\r\n  payload: callState\r\n});\r\n\r\nexport const setCameraEnabled = (isCameraEnabled: boolean) => ({\r\n  type: CallActionTypes.SET_CAMERA_ENABLED,\r\n  payload: isCameraEnabled\r\n});\r\n\r\nexport const setMicrophoneEnabled = (isMicrophoneEnabled: boolean) => ({\r\n  type: CallActionTypes.SET_MICROPHONE_ENABLED,\r\n  payload: isMicrophoneEnabled\r\n});\r\n\r\nexport const setScreenSharingEnabled = (isScreenSharing: boolean) => ({\r\n  type: CallActionTypes.SET_SCREENSHARING_ENABLED,\r\n  payload: isScreenSharing\r\n});\r\n\r\nexport const resetCallState = () => ({\r\n  type: CallActionTypes.RESET_CALL_STATE\r\n});\r\n\r\nexport const showCallDialog = (showCallDialog: IDialogType) => ({\r\n  type: CallActionTypes.SHOW_CALL_DIALOG,\r\n  payload: showCallDialog\r\n});\r\n\r\nexport const setCallerName = (name: string) => ({\r\n  type: CallActionTypes.SET_NAME_OF_CALLER,\r\n  payload: name\r\n});\r\n\r\nexport const setLastTextMessage = (lastTextMessage: ITextMessage) => ({\r\n  type: CallActionTypes.SET_LAST_TEXT_MESSAGE,\r\n  payload: lastTextMessage\r\n});\r\n\r\nexport const setNewTextMessage = (newTextMessage: ITextMessage) => ({\r\n  type: CallActionTypes.NEW_TEXT_MESSAGE,\r\n  payload: newTextMessage\r\n});","export type ChatState = {\r\n  activeUsers: string[],\r\n  availableUsers: string[],\r\n\tbusyUsers: string[]\r\n}\r\n\r\nexport enum ChatActionTypes {\r\n  SET_ACTIVE_USERS = 'SET_ACTIVE_USERS',\r\n  SET_AVAILABLE_USERS = 'SET_AVAILABLE_USERS',\r\n  SET_BUSY_USERS = 'SET_BUSY_USERS'\r\n}","\r\nimport axios from 'axios';\r\nimport { ICredentials } from '../../types/credentials.interface';\r\nimport IRegisterCredentials from '../../types/sign-up.interface';\r\nconst ROOT_URL = 'https://juptr-mart112.herokuapp.com';\r\n// const ROOT_URL = 'http://localhost:5000';\r\n// const ROOT_URL = 'https://juptr-martin112.netlify.app';\r\n\r\nexport async function loginUser(loginPayload: ICredentials) {\r\n  try {\r\n    const response = await axios({ \r\n      url: `${ROOT_URL}/v1/auth/signin`, \r\n      method: 'POST',\r\n      data: loginPayload,\r\n      withCredentials: true\r\n    });\r\n    const { id, displayName, email, fullName } = response.data;\r\n    return { id, displayName, email, fullName };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function logoutUser() {\r\n  try {\r\n    const response = await axios({ \r\n      url: `${ROOT_URL}/v1/auth/signout`, \r\n      method: 'POST',\r\n      withCredentials: true\r\n    });\r\n    return response;\r\n  } catch(error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function checkCurrentUserSession() {\r\n  try {\r\n    const response = await axios({ \r\n      url: `${ROOT_URL}/v1/auth/currentuser`, \r\n      method: 'GET',\r\n      withCredentials: true\r\n    });\r\n\r\n    const { currentUser:  { id, displayName, email, fullName } } = response.data;\r\n    return {id, displayName, email, fullName};\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function registerUser(registerPayload: IRegisterCredentials) {\r\n  try {\r\n    const response = await axios({ \r\n      url: `${ROOT_URL}/v1/auth/signup`, \r\n      method: 'POST',\r\n      data: registerPayload,\r\n      withCredentials: true\r\n    });\r\n    const { id, displayName, email, fullName } = response.data;\r\n    return { id, displayName, email, fullName };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\r\nimport { ICredentials } from \"../../types/credentials.interface\";\r\nimport IResponseError from \"../../types/error.interface\";\r\nimport ILoggedIn from \"../../types/logged-in.interface\";\r\nimport IRegisterCredentials from \"../../types/sign-up.interface\";\r\nimport { resetCallState } from \"../call/call.actions\";\r\nimport { checkUserSessionFailure, checkUserSessionSuccess, registrationFailure, registrationSuccess, signInFailure, signInSuccess, signOutFailure, signOutSuccess } from \"./auth.actions\";\r\nimport { AuthActionTypes } from \"./auth.types\";\r\nimport { checkCurrentUserSession, loginUser, logoutUser, registerUser } from \"./auth.utils\";\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const user : ILoggedIn  = yield call(checkCurrentUserSession);\r\n    if (!user) return;\r\n    yield put(checkUserSessionSuccess(user));\r\n  } catch (error) {\r\n    yield put(checkUserSessionFailure());\r\n  }\r\n}\r\n\r\nexport function* signIn({type, payload}:\r\n  { \r\n    type: typeof AuthActionTypes.SIGN_IN_START\r\n    payload: ICredentials\r\n  }) {\r\n  try {\r\n    const user : ILoggedIn = yield call(loginUser, payload);\r\n    if (!user) return;\r\n    yield put(signInSuccess(user));\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      const errors : IResponseError[] = error.response.data.errors;\r\n      yield put(signInFailure(errors));\r\n    } else {\r\n      yield put(signInFailure([{\r\n        msg: 'Login Service Unavailable'\r\n      }]));\r\n    }\r\n  }\r\n}\r\n\r\nexport function* signUp({type, payload}:\r\n  { \r\n    type: typeof AuthActionTypes.REGISTRATION_START\r\n    payload: IRegisterCredentials\r\n  }) {\r\n  try {\r\n    const registeredUser: ILoggedIn = yield call(registerUser, payload);\r\n    if (!registeredUser) return;\r\n    yield put(registrationSuccess(registeredUser));\r\n    // yield put(signInSuccess(registeredUser));\r\n  } catch(error: any) {\r\n    if (error.response) {\r\n      const errors : IResponseError[] = error.response.data.errors;\r\n      yield put(registrationFailure(errors));\r\n    } else {\r\n      yield put(registrationFailure([{\r\n        msg: 'Registration Service Unavailable',\r\n        param: 'offline'\r\n      }]));\r\n    }\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield call(logoutUser);\r\n    yield put(signOutSuccess());\r\n    yield put(resetCallState());\r\n  } catch (error) {\r\n    yield put(signOutFailure([{\r\n      msg: 'Failed to signout.'\r\n    }]));\r\n  }\r\n}\r\n\r\n// export function* signInAfterRegistration({type, payload}:\r\n//   { \r\n//     type: typeof AuthActionTypes.REGISTRATION_SUCCESS\r\n//     payload: ILoggedIn\r\n//   }) {\r\n//     try {\r\n//       const user = payload;\r\n//       if (!user) return;\r\n//       yield put(signInSuccess(user));\r\n//     } catch(error) {\r\n//       yield put(signInFailure([]));\r\n//     }\r\n// }\r\n\r\n// export function* onSignUpSuccess() {\r\n//   yield takeLatest(AuthActionTypes.REGISTRATION_SUCCESS, signInAfterRegistration);\r\n// }\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(AuthActionTypes.REGISTRATION_START, signUp);\r\n}\r\n\r\nexport function* onSignInStart() {\r\n  yield takeLatest(AuthActionTypes.SIGN_IN_START, signIn);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(AuthActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onCheckUserSessionStart() {\r\n  yield takeLatest(AuthActionTypes.CURRENT_USER_SESSION_START, isUserAuthenticated);\r\n}\r\n\r\nexport function* authSagas() {\r\n  yield all([\r\n    call(onSignInStart),\r\n    call(onSignUpStart),\r\n    call(onSignOutStart),\r\n    call(onCheckUserSessionStart),\r\n  ]);\r\n};","import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\r\nimport ILoggedIn from \"../../types/logged-in.interface\";\r\nimport { resetCallState } from \"./call.actions\";\r\nimport { checkUserSessionFailure, checkUserSessionSuccess } from \"../auth/auth.actions\";\r\nimport { checkCurrentUserSession } from \"../auth/auth.utils\";\r\nimport { CallActionTypes, CallStates } from \"./call.types\";\r\n\r\nexport function* callState({type, payload}:\r\n  { \r\n    type: typeof CallActionTypes.SET_CALL_STATE\r\n    payload: typeof CallStates.CALL_AVAILABLE | CallStates.CALL_IN_PROGRESS | CallStates.CALL_REQUESTED \r\n    | CallStates.CALL_UNAVAILABLE\r\n  }) {\r\n  try {\r\n    const user : ILoggedIn  = yield call(checkCurrentUserSession);\r\n    if (!user) return;\r\n    yield put(checkUserSessionSuccess(user));\r\n  } catch (error) {\r\n    yield put(resetCallState());\r\n    yield put(checkUserSessionFailure());\r\n  }\r\n}\r\n\r\nexport function* onSetCallState() {\r\n  yield takeLatest(CallActionTypes.SET_CALL_STATE, callState);\r\n}\r\n\r\nexport function* callSagas() {\r\n  yield all([\r\n    call(onSetCallState),\r\n  ]);\r\n};","import { all } from \"@redux-saga/core/effects\";\r\n\r\nimport { authSagas } from \"./auth/auth.sagas\";\r\nimport { callSagas } from \"./call/call.sagas\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    authSagas(),\r\n    callSagas()\r\n  ]);\r\n}","import {AuthActionTypes, AuthState } from './auth.types';\r\n\r\ninterface IAuthAction {\r\n  type: AuthActionTypes;\r\n\tpayload?: any;\r\n}\r\n\r\nexport const authInitialState : AuthState = {\r\n  user: null,\r\n  loading: false,\r\n  errorMessage: []\r\n}\r\n\r\nconst AuthReducer = (state: AuthState = authInitialState, action: IAuthAction) : AuthState => {\r\n\tswitch (action.type) {\r\n\t\tcase AuthActionTypes.CURRENT_USER_SESSION_START:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.CURRENT_USER_SESSION_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\tuser: action.payload\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.RESET_ERRORS: \r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terrorMessage: []\r\n\t\t\t}\r\n\t\tcase AuthActionTypes.SIGN_IN_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuser: action.payload,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terrorMessage: []\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.SIGN_IN_START:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.SIGN_OUT_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tuser: null,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terrorMessage: []\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.REGISTRATION_START:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.REGISTRATION_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terrorMessage: [],\r\n\t\t\t\tuser: action.payload\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.CURRENT_USER_SESSION_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\tuser: null,\r\n\t\t\t\terrorMessage: []\r\n\t\t\t};\r\n\t\tcase AuthActionTypes.SIGN_IN_FAILURE:\r\n\t\tcase AuthActionTypes.SIGN_OUT_FAILURE:\r\n\t\tcase AuthActionTypes.REGISTRATION_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\terrorMessage: (action.payload)?action.payload:[] \r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n// const AuthReducer = (state: AuthState, action: AuthAction) : AuthState => {\r\n// \tswitch (action.type) {\r\n// \t\tcase AuthActionTypes.RESET_ERRORS:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\terrorMessage: [],\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.REQUEST_LOGIN:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tloading: true,\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.LOGIN_SUCCESS:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tuser: action.payload?.user,\r\n// \t\t\t\tloading: false,\r\n// \t\t\t\terrorMessage: [],\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.LOGOUT:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tuser: {\r\n// \t\t\t\t\tdisplayName: '',\r\n// \t\t\t\t\temail: '',\r\n// \t\t\t\t\tfullName: '',\r\n// \t\t\t\t\tid: '' \r\n// \t\t\t\t},\r\n// \t\t\t\tloading: false,\r\n// \t\t\t\terrorMessage: []\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.LOGIN_ERROR:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tuser: {\r\n// \t\t\t\t\tdisplayName: '',\r\n// \t\t\t\t\temail: '',\r\n// \t\t\t\t\tfullName: '',\r\n// \t\t\t\t\tid: '' \r\n// \t\t\t\t},\r\n// \t\t\t\tloading: false,\r\n// \t\t\t\terrorMessage: action.error!,\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.CHECK_USER_SESSION:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tloading: true,\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.CURRENT_USER_SESSION:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tuser: action.payload?.user,\r\n// \t\t\t\tloading: false\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.REQUEST_REGISTRATION:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tloading: true,\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.REGISTRATION_SUCCESS:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tloading: false,\r\n// \t\t\t\terrorMessage: []\r\n// \t\t\t};\r\n// \t\tcase AuthActionTypes.REGISTRATION_ERROR:\r\n// \t\t\treturn {\r\n// \t\t\t\t...state,\r\n// \t\t\t\tloading: false,\r\n// \t\t\t\terrorMessage: action.error!,\r\n// \t\t\t};\r\n// \t\tdefault:\r\n// \t\t\tthrow new Error(`Unhandled action type: ${action.type}`);\r\n// \t}\r\n// };\r\n\r\nexport default AuthReducer;","import { CallActionTypes, CallState, CallStates } from \"./call.types\";\r\n\r\ninterface ICallAction {\r\n  type: CallActionTypes;\r\n\tpayload?: any;\r\n}\r\n\r\nexport const callInitialState : CallState = {\r\n\tcallState: CallStates.CALL_AVAILABLE,\r\n  localStream: null,\r\n  remoteStream: null,\r\n\tscreenSharingStream: null,\r\n  isScreenSharing: false,\r\n  isCameraEnabled: true,\r\n  isMicrophoneEnabled: true,\r\n  name: '',\r\n\tshowCallDialog: { show: false },\r\n\tlastTextMessage: undefined,\r\n\ttextMessages: []\r\n}\r\n\r\nconst CallReducer = (state: CallState = callInitialState, action: ICallAction) : CallState => {\r\n\tswitch (action.type) {\r\n\t\tcase CallActionTypes.SET_LAST_TEXT_MESSAGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n        lastTextMessage: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.NEW_TEXT_MESSAGE:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\ttextMessages: [...state.textMessages, action.payload]\r\n\t\t\t\t};\r\n\t\tcase CallActionTypes.SET_LOCAL_STREAM:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n        localStream: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_REMOTE_STREAM:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tremoteStream: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_SCREENSHARING_STREAM:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tscreenSharingStream: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_CALL_STATE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcallState: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_CAMERA_ENABLED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisCameraEnabled: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_MICROPHONE_ENABLED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisMicrophoneEnabled: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_SCREENSHARING_ENABLED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisScreenSharing: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SET_NAME_OF_CALLER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tname: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.SHOW_CALL_DIALOG:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tshowCallDialog: action.payload\r\n\t\t\t};\r\n\t\tcase CallActionTypes.RESET_CALL_STATE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcallState: CallStates.CALL_AVAILABLE,\r\n\t\t\t\t// localStream: null,\r\n\t\t\t\tremoteStream: null,\r\n\t\t\t\tscreenSharingStream: null,\r\n\t\t\t\tisScreenSharing: false,\r\n\t\t\t\tisCameraEnabled: true,\r\n\t\t\t\tisMicrophoneEnabled: true,\r\n\t\t\t\tname: '',\r\n\t\t\t\tshowCallDialog: { show: false },\r\n\t\t\t\tlastTextMessage: undefined,\r\n\t\t\t\ttextMessages: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default CallReducer;","import { ChatActionTypes, ChatState } from \"./chat.types\";\r\n\r\ninterface IChatAction {\r\n  type: ChatActionTypes;\r\n\tpayload?: any;\r\n}\r\n\r\nexport const chatInitialState : ChatState = {\r\n  activeUsers: [],\r\n\tavailableUsers: [],\r\n\tbusyUsers: []\r\n}\r\n\r\nconst ChatReducer = (state: ChatState = chatInitialState, action: IChatAction) : ChatState => {\r\n\tswitch (action.type) {\r\n\t\tcase ChatActionTypes.SET_ACTIVE_USERS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tactiveUsers: action.payload\r\n\t\t\t};\r\n\t\tcase ChatActionTypes.SET_AVAILABLE_USERS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tavailableUsers: action.payload\r\n\t\t\t\t// busyUsers: state.busyUsers.filter((currentUser) => {\r\n\t\t\t\t// \treturn !action.payload.includes(currentUser);\r\n\t\t\t\t// })\r\n\t\t\t};\r\n\t\tcase ChatActionTypes.SET_BUSY_USERS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tbusyUsers: action.payload\r\n\t\t\t\t// busyUsers: action.payload\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default ChatReducer;","import { combineReducers } from 'redux';\r\n\r\nimport AuthReducer from './auth/auth.reducer';\r\nimport CallReducer from './call/call.reducer';\r\nimport ChatReducer from './chat/chat.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: AuthReducer,\r\n  chat: ChatReducer,\r\n  call: CallReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, Middleware } from 'redux';\r\n\r\nimport rootSaga from './root-saga';\r\nimport rootReducer from './root-reducer';\r\nimport createSagaMiddleware from '@redux-saga/core';\r\n\r\nimport logger from 'redux-logger';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares : Middleware[] = [sagaMiddleware];\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>","import IResponseError from \"../../types/error.interface\";\r\nimport ILoggedIn from \"../../types/logged-in.interface\";\r\n\r\nexport type AuthState = {\r\n  user?: ILoggedIn | null;\r\n  errorMessage: IResponseError[];\r\n  loading: boolean;\r\n}\r\n\r\nexport enum AuthActionTypes {\r\n  SIGN_IN_START = 'SIGN_IN_START',\r\n  SIGN_IN_SUCCESS = 'SIGN_IN_SUCCESS',\r\n  SIGN_IN_FAILURE = 'SIGN_IN_FAILURE',\r\n\r\n  SIGN_OUT_START = 'SIGN_OUT_START',\r\n  SIGN_OUT_SUCCESS = 'SIGN_OUT_SUCCESS',\r\n  SIGN_OUT_FAILURE = 'SIGN_OUT_FAILURE',\r\n\r\n  REGISTRATION_START = 'REGISTRATION_START',\r\n  REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS',\r\n  REGISTRATION_FAILURE = 'REGISTRATION_FAILURE',\r\n\r\n  CURRENT_USER_SESSION_START = 'CURRENT_USER_SESSION_START',\r\n  CURRENT_USER_SESSION_SUCCESS = 'CURRENT_USER_SESSION_SUCCESS',\r\n  CURRENT_USER_SESSION_FAILURE = 'CURRENT_USER_SESSION_FAILURE',\r\n\r\n  RESET_ERRORS = 'RESET_ERRORS',\r\n\r\n  // REQUEST_LOGIN = 'REQUEST_LOGIN',\r\n  // LOGIN_SUCCESS = 'LOGIN_SUCCESS',\r\n  // LOGIN_ERROR = 'LOGIN_ERROR',\r\n  // LOGOUT = 'LOGOUT',\r\n  // CHECK_USER_SESSION = 'CHECK_USER_SESSION',\r\n  // CURRENT_USER_SESSION = 'CURRENT_USER_SESSION',\r\n  // REQUEST_REGISTRATION = 'REQUEST_REGISTRATION',\r\n  // REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS',\r\n  // REGISTRATION_ERROR = 'REGISTRATION_ERROR',\r\n  // RESET_ERRORS = 'RESET_ERRORS'\r\n};\r\n\r\n// export type AuthAction = {\r\n//   type: AuthActionTypes;\r\n//   payload?: { user: ILoggedIn};\r\n//   error?: IResponseError[];\r\n// }\r\n\r\n\r\n// interface ILoggedIn {\r\n//   displayName: string;\r\n//   email: string;\r\n//   fullName: string;\r\n//   id: string;\r\n// }\r\n","export type CallState = {\r\n  callState: CallStates\r\n  localStream: MediaStream | null,\r\n  remoteStream: MediaStream | null,\r\n  screenSharingStream: MediaStream | null,\r\n  isScreenSharing: boolean,\r\n  isCameraEnabled: boolean,\r\n  isMicrophoneEnabled: boolean,\r\n  name: string,\r\n  showCallDialog: IDialogType,\r\n  lastTextMessage: ITextMessage | undefined,\r\n  textMessages: ITextMessage[],\r\n}\r\n\r\nexport interface ITextMessage {\r\n  message: string,\r\n  from: string,\r\n  date: Date | undefined;\r\n}\r\n\r\nexport interface IDialogType {\r\n  type?: string,\r\n  show: boolean\r\n}\r\n\r\nexport enum CallStates {\r\n  CALL_UNAVAILABLE = 'CALL_UNAVAILABLE',\r\n  CALL_AVAILABLE = 'CALL_AVAILABLE',\r\n  CALL_REQUESTED = 'CALL_REQUESTED',\r\n  CALL_IN_PROGRESS = 'CALL_IN_PROGRESS'\r\n}\r\n\r\nexport enum CallActionTypes {\r\n  SET_LOCAL_STREAM = 'SET_LOCAL_STREAM',\r\n  SET_REMOTE_STREAM = 'SET_REMOTE_STREAM',\r\n  SET_SCREENSHARING_STREAM = 'SET_SCREENSHARING_STREAM',\r\n  SET_CALL_STATE = 'SET_CALL_STATE',\r\n  SET_CAMERA_ENABLED = 'SET_CAMERA_ENABLED',\r\n  SET_MICROPHONE_ENABLED = 'SET_MICROPHONE_ENABLED',\r\n  SET_SCREENSHARING_ENABLED = 'SET_SCREENSHARING_ENABLED',\r\n  SET_NAME_OF_CALLER = 'SET_NAME_OF_CALLER',\r\n  RESET_CALL_STATE = 'RESET_CALL_STATE',\r\n  SHOW_CALL_DIALOG = 'SHOW_CALL_DIALOG',\r\n  SET_LAST_TEXT_MESSAGE = 'SET_LAST_TEXT_MESSAGE',\r\n  NEW_TEXT_MESSAGE = 'NEW_TEXT_MESSAGE'\r\n}\r\n"],"sourceRoot":""}